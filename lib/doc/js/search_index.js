var search_data = {"index":{"searchIndex":["elasticsearchqueryparser","grammar","parser","presenters","operator","invalidoperatorstring","query","term","transformer","parsefailedexception","sentence","configuration()","configure()","message()","new()","new()","new()","new()","new()","new()","parse_query()","to_elasticsearch()","to_elasticsearch()","to_elasticsearch()","to_s()"],"longSearchIndex":["elasticsearchqueryparser","elasticsearchqueryparser::grammar","elasticsearchqueryparser::grammar::parser","elasticsearchqueryparser::grammar::presenters","elasticsearchqueryparser::grammar::presenters::operator","elasticsearchqueryparser::grammar::presenters::operator::invalidoperatorstring","elasticsearchqueryparser::grammar::presenters::query","elasticsearchqueryparser::grammar::presenters::term","elasticsearchqueryparser::grammar::transformer","elasticsearchqueryparser::parsefailedexception","elasticsearchqueryparser::sentence","elasticsearchqueryparser::configuration()","elasticsearchqueryparser::configure()","elasticsearchqueryparser::grammar::presenters::operator::invalidoperatorstring#message()","elasticsearchqueryparser::grammar::presenters::operator::new()","elasticsearchqueryparser::grammar::presenters::operator::invalidoperatorstring::new()","elasticsearchqueryparser::grammar::presenters::query::new()","elasticsearchqueryparser::grammar::presenters::term::new()","elasticsearchqueryparser::parsefailedexception::new()","elasticsearchqueryparser::sentence::new()","elasticsearchqueryparser::parse_query()","elasticsearchqueryparser::grammar::presenters::operator#to_elasticsearch()","elasticsearchqueryparser::grammar::presenters::query#to_elasticsearch()","elasticsearchqueryparser::grammar::presenters::term#to_elasticsearch()","elasticsearchqueryparser::sentence#to_s()"],"info":[["ElasticsearchQueryParser","","ElasticsearchQueryParser.html","","<p>Mail ElasticsearchQueryParser interface\n"],["ElasticsearchQueryParser::Grammar","","ElasticsearchQueryParser/Grammar.html","",""],["ElasticsearchQueryParser::Grammar::Parser","","ElasticsearchQueryParser/Grammar/Parser.html","","<p>User query grammar description (PEG tree)\n"],["ElasticsearchQueryParser::Grammar::Presenters","","ElasticsearchQueryParser/Grammar/Presenters.html","",""],["ElasticsearchQueryParser::Grammar::Presenters::Operator","","ElasticsearchQueryParser/Grammar/Presenters/Operator.html","",""],["ElasticsearchQueryParser::Grammar::Presenters::Operator::InvalidOperatorString","","ElasticsearchQueryParser/Grammar/Presenters/Operator/InvalidOperatorString.html","",""],["ElasticsearchQueryParser::Grammar::Presenters::Query","","ElasticsearchQueryParser/Grammar/Presenters/Query.html","",""],["ElasticsearchQueryParser::Grammar::Presenters::Term","","ElasticsearchQueryParser/Grammar/Presenters/Term.html","",""],["ElasticsearchQueryParser::Grammar::Transformer","","ElasticsearchQueryParser/Grammar/Transformer.html","","<p>Transform rules (accept PEG trees) from Parslet grammar and modify trees according to described rules …\n"],["ElasticsearchQueryParser::ParseFailedException","","ElasticsearchQueryParser/ParseFailedException.html","",""],["ElasticsearchQueryParser::Sentence","","ElasticsearchQueryParser/Sentence.html","","<p>Transform user query to `Left to Right` expression for parser usage\n"],["configuration","ElasticsearchQueryParser","ElasticsearchQueryParser.html#method-c-configuration","()","<p>Gem configuration object For now only contain 1 attribute: `elastic_field_name` option (by default :text) …\n"],["configure","ElasticsearchQueryParser","ElasticsearchQueryParser.html#method-c-configure","()","<p>For gem configuration For now only `elastic_field_name` can be modified. See README.md for details\n"],["message","ElasticsearchQueryParser::Grammar::Presenters::Operator::InvalidOperatorString","ElasticsearchQueryParser/Grammar/Presenters/Operator/InvalidOperatorString.html#method-i-message","()",""],["new","ElasticsearchQueryParser::Grammar::Presenters::Operator","ElasticsearchQueryParser/Grammar/Presenters/Operator.html#method-c-new","(operator)",""],["new","ElasticsearchQueryParser::Grammar::Presenters::Operator::InvalidOperatorString","ElasticsearchQueryParser/Grammar/Presenters/Operator/InvalidOperatorString.html#method-c-new","(string)",""],["new","ElasticsearchQueryParser::Grammar::Presenters::Query","ElasticsearchQueryParser/Grammar/Presenters/Query.html#method-c-new","(terms, operator, nested_query)",""],["new","ElasticsearchQueryParser::Grammar::Presenters::Term","ElasticsearchQueryParser/Grammar/Presenters/Term.html#method-c-new","(term)",""],["new","ElasticsearchQueryParser::ParseFailedException","ElasticsearchQueryParser/ParseFailedException.html#method-c-new","(parse_failure_cause)",""],["new","ElasticsearchQueryParser::Sentence","ElasticsearchQueryParser/Sentence.html#method-c-new","(sentence)","<p>Initialize with user input\n"],["parse_query","ElasticsearchQueryParser","ElasticsearchQueryParser.html#method-c-parse_query","(user_query)","<p>Parse given string into Elastic query object (see README.md for more examples) Example:\n\n<pre>&gt;&gt; ElasticsearchQueryParser.parse_query(&quot;London&quot;) ...</pre>\n"],["to_elasticsearch","ElasticsearchQueryParser::Grammar::Presenters::Operator","ElasticsearchQueryParser/Grammar/Presenters/Operator.html#method-i-to_elasticsearch","()",""],["to_elasticsearch","ElasticsearchQueryParser::Grammar::Presenters::Query","ElasticsearchQueryParser/Grammar/Presenters/Query.html#method-i-to_elasticsearch","(include_bool_header = true)","<p>If its `must_not` operator - just add `must_not` to root node and continue analyze nested queries Otherwise …\n"],["to_elasticsearch","ElasticsearchQueryParser::Grammar::Presenters::Term","ElasticsearchQueryParser/Grammar/Presenters/Term.html#method-i-to_elasticsearch","()",""],["to_s","ElasticsearchQueryParser::Sentence","ElasticsearchQueryParser/Sentence.html#method-i-to_s","()","<p>Return valid for parser usage user input Example:\n\n<pre>&gt;&gt; ElasticsearchQueryParser.new(&quot;(London AND Madrid) ...</pre>\n"]]}}